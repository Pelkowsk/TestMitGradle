name: CICDTest

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          # cache: gradle # Prevent unnecessary steps (Wrapper download) through caching
          java-version: 17

      - name: Build Application (Gradle)
        run: ./gradlew build --no-daemon

      - name: Test Application (Gradle)
        run: ./gradlew test --no-daemon

      # - name: Special Application Test
      #   run: |
      #     for test in $(cat testlist.txt); do
      #       ./gradlew test --tests "$test" --no-daemon || exit 1
      #     done
      # For running tests listed in the file testlist.txt

      - name: Set Timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV
          # For adding a timestamp (Preparation)

      - name: Upload Test Results
        if: always() # Execute even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}-(${{ env.TIMESTAMP }}) # Or use timestamp ${{ env.TIMESTAMP }}
          path: build/reports/tests/test # Gradle saves default reports here

      - name: Log in to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.TOKEN_DOCKER_TESTMITGRADLE }}
        run: echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/meineanwendung:latest .

      - name: Push Docker Image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/meineanwendung:latest ${{ secrets.DOCKER_USERNAME }}/meineanwendung:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/meineanwendung:latest

      - name: Verify Docker Image
        run: |
          echo "Image pushed to DockerHub: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/meineanwendung:latest"

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run License Scanner
        run: |
          curl -LO https://github.com/licensee/licensee/releases/download/v9.16.0/licensee-linux
          chmod +x licensee-linux
          ./licensee-linux detect . --json > license-report.json

      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: license-report.json